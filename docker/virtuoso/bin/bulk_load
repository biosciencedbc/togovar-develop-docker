#!/usr/bin/env bash

set -e

# set default value
ISQL=${ISQL:-isql-v}
ISQL_PORT=${ISQL_PORT:-1111}
DBA_USER=${DBA_USER:-dba}
DBA_PASSWORD=${DBA_PASSWORD:-dba}
LIST=
STATUS=
RESET=
PARALLEL=1

function usage() {
  echo "$(basename "$0") [OPTIONS]" >&2
  echo >&2
  echo "Options:" >&2
  echo "  -d, --directory=PATH       set path to the folder where the files will be loaded" >&2
  echo "  -m, --mask=PATTERN         set SQL like pattern to match against the files in the directory" >&2
  echo "  -g, --graph=IRI            set target graph IRI, parsed triples will appear in that graph" >&2
  echo "  -p, --parallel=NUMBER      set number of parallelization of loader" >&2
  echo >&2
  echo "  -l, --list                 print load list" >&2
  echo "  -s, --status               print count of load status" >&2
  echo "  -r, --reset-errors         remove errors from load list" >&2
  echo "  -h, --help                 print this messages" >&2
  echo >&2
  echo "ISQL Options:" >&2
  echo "  -S, --port=NUMBER          set the TCP port to connect to" >&2
  echo "  -U, --username=NAME        set the login user ID" >&2
  echo "  -P, --password=PASSWORD    set the login password" >&2
  echo >&2
}

POSITIONAL=()
while [[ $# -gt 0 ]]; do
  key="$1"

  case $key in
  -h | --help)
    usage
    exit 0
    ;;
  -d | --directory)
    DIRECTORY="$2"
    shift
    shift
    ;;
  -m | --mask)
    MASK="$2"
    shift
    shift
    ;;
  -g | --graph)
    GRAPH="$2"
    shift
    shift
    ;;
  -p | --parallel)
    PARALLEL="$2"
    shift
    shift
    ;;
  -l | --list)
    LIST=1
    shift
    ;;
  -s | --status)
    STATUS=1
    shift
    ;;
  -r | --reset-errors)
    RESET=1
    shift
    ;;
  -S | --port)
    ISQL_PORT="$2"
    shift
    shift
    ;;
  -U | --username)
    DBA_USER="$2"
    shift
    shift
    ;;
  -P | --password)
    DBA_PASSWORD="$2"
    shift
    shift
    ;;
  -* | --*)
    echo "Unknown option: $1" >&2
    exit 1
    ;;
  *)
    POSITIONAL+=("$1")
    shift
    ;;
  esac
done

set -- "${POSITIONAL[@]}"

function isql_exec() {
  $ISQL -U "$DBA_USER" -P "$DBA_PASSWORD" -S "$ISQL_PORT" VERBOSE=OFF EXEC="$1"
}

function list() {
  isql_exec "SELECT ll_file, ll_graph, ll_state FROM dba.load_list;"
}

function count_status() {
  local status=$1
  local count
  count=$(isql_exec "SELECT COUNT(*) FROM dba.load_list WHERE ll_state = ${status};" | tail -1)

  echo "$count"
}

function count_error() {
  local count
  count=$(isql_exec "SELECT COUNT(*) FROM dba.load_list WHERE ll_error IS NOT NULL;" | tail -1)

  echo "$count"
}

function list_error() {
  local fields=$1

  isql_exec "SELECT $fields FROM dba.load_list WHERE ll_error IS NOT NULL;"
}

STATE_TO_BE_LOADED=0
STATE_IN_PROGRESS=1
STATE_COMPLETE=2

function count_remnant() {
  count_status $STATE_TO_BE_LOADED
}

function count_processing() {
  count_status $STATE_IN_PROGRESS
}

function count_complete() {
  count_status $STATE_COMPLETE
}

function server_alive() {
  local count
  count=$(isql_exec "SELECT COUNT(*) FROM dba.load_list;" 2>&1 | tail -1)

  if [[ -n $count ]]; then
    return 0
  else
    return 1
  fi
}

function status() {
  echo "remnant: $(count_remnant)"
  echo "processing: $(count_processing)"
  echo "error: $(count_error)"
}

function reset_errors() {
  isql_exec "DELETE FROM dba.load_list WHERE ll_error IS NOT NULL;"
}

# main

if ! server_alive; then
  echo "Failed to connect server" >&2
  exit 1
fi

if [[ -n "$LIST" ]]; then
  list
  exit 0
fi

if [[ -n "$STATUS" ]]; then
  status
  exit 0
fi

if [[ -n "$RESET" ]]; then
  reset_errors
  list_error "ll_file, ll_graph"
  exit 0
fi

isql_exec "ld_dir('${DIRECTORY}', '${MASK}', '${GRAPH}');"

remnant=$(count_remnant)
if [[ $remnant == "0" ]]; then
  echo "Nothing to load"
  exit 1
fi

echo "Loading started at $(date) (PARALLEL = $PARALLEL)"

for i in $(seq 1 "$PARALLEL"); do
  isql_exec "log_enable(2,1); rdf_loader_run();" &
done
wait

echo "Loading finished at $(date)"
echo

error=$(isql_exec "SELECT COUNT(ll_file) FROM dba.load_list WHERE ll_state = 2" | tail -1)
if [[ $error != "0" ]]; then
  echo "Errors in these files:"
  list_error "ll_file, ll_graph"
fi

echo "Checkpoint started at $(date)"

isql_exec "checkpoint;"

echo "Checkpoint finished at $(date)"
echo
